# filter to only keep genes with FDR < .05
NvT.DE <-subset(Tbl_NvT, Tbl_NvT$FDR < 0.05)
dim(NvT.DE)
NvT.up <- subset(NvT.DE, NvT.DE$logFC > 0)
NvT.down <- subset(NvT.DE, NvT.DE$logFC < 0)
write.csv(NvT.DE, "NvT_DE.csv")
Tbl_NvT.DE <- mutate(Tbl_NvT, log10p= -log10(PValue))
sig <- Tbl_NvT.DE$FDR < .05
Tbl_NvT.DE <- mutate(Tbl_NvT.DE, sig = sig)
ggplot(Tbl_NvT.DE, aes(x=logFC, y=log10p, col=sig)) + geom_point() + theme_classic() + theme(legend.position = "none") + ggtitle("AHQT_LD vs. AHQN_LD")
write.csv(Tbl_NvT.DE, "AHQT_LDvsAHQF1i_LD.csv")
# exact test for differential expression between pairs -- run this code between all genotype & treatment pairs
et_NvT <- exactTest(d.subset, pair=c("AHQT_SD","AHQF1x_LD"))  ## You will change "pair" and the name to the appropriate labels for your groups' questions.
# make tables of the top tags for analysis
# the problem happens before this part
Tbl_NvT <- topTags(et_NvT, n=nrow(et_NvT$table))$table  ## Out put the results into a table
write.table(Tbl_NvT, file="Tbl_NvT.csv", sep=",", row.names=TRUE)  ## Save the table for analyses next week!
## total number of significantly differently expressed genes for each pair:
is.de.NvT <- decideTestsDGE(et_NvT, p = 0.05)
summary(is.de.NvT)
## plot the differential expression
plotMD(et_NvT)
abline(h=c(-1, 1), col="blue")
# filter to only keep genes with FDR < .05
NvT.DE <-subset(Tbl_NvT, Tbl_NvT$FDR < 0.05)
dim(NvT.DE)
NvT.up <- subset(NvT.DE, NvT.DE$logFC > 0)
NvT.down <- subset(NvT.DE, NvT.DE$logFC < 0)
write.csv(NvT.DE, "NvT_DE.csv")
Tbl_NvT.DE <- mutate(Tbl_NvT, log10p= -log10(PValue))
sig <- Tbl_NvT.DE$FDR < .05
Tbl_NvT.DE <- mutate(Tbl_NvT.DE, sig = sig)
ggplot(Tbl_NvT.DE, aes(x=logFC, y=log10p, col=sig)) + geom_point() + theme_classic() + theme(legend.position = "none") + ggtitle("AHQT_LD vs. AHQN_LD")
write.csv(Tbl_NvT.DE, "AHQT_LDvsAHQF1x_LD.csv")
# exact test for differential expression between pairs -- run this code between all genotype & treatment pairs
et_NvT <- exactTest(d.subset, pair=c("AHQT_SD","AHQF1x_SD"))  ## You will change "pair" and the name to the appropriate labels for your groups' questions.
# make tables of the top tags for analysis
# the problem happens before this part
Tbl_NvT <- topTags(et_NvT, n=nrow(et_NvT$table))$table  ## Out put the results into a table
write.table(Tbl_NvT, file="Tbl_NvT.csv", sep=",", row.names=TRUE)  ## Save the table for analyses next week!
## total number of significantly differently expressed genes for each pair:
is.de.NvT <- decideTestsDGE(et_NvT, p = 0.05)
summary(is.de.NvT)
## plot the differential expression
plotMD(et_NvT)
abline(h=c(-1, 1), col="blue")
# filter to only keep genes with FDR < .05
NvT.DE <-subset(Tbl_NvT, Tbl_NvT$FDR < 0.05)
dim(NvT.DE)
NvT.up <- subset(NvT.DE, NvT.DE$logFC > 0)
NvT.down <- subset(NvT.DE, NvT.DE$logFC < 0)
write.csv(NvT.DE, "NvT_DE.csv")
Tbl_NvT.DE <- mutate(Tbl_NvT, log10p= -log10(PValue))
sig <- Tbl_NvT.DE$FDR < .05
Tbl_NvT.DE <- mutate(Tbl_NvT.DE, sig = sig)
ggplot(Tbl_NvT.DE, aes(x=logFC, y=log10p, col=sig)) + geom_point() + theme_classic() + theme(legend.position = "none") + ggtitle("AHQT_LD vs. AHQN_LD")
write.csv(Tbl_NvT.DE, "AHQT_LDvsAHQF1x_SD.csv")
# exact test for differential expression between pairs -- run this code between all genotype & treatment pairs
et_NvT <- exactTest(d.subset, pair=c("AHQT_SD","AHQFN_LD"))  ## You will change "pair" and the name to the appropriate labels for your groups' questions.
# make tables of the top tags for analysis
# the problem happens before this part
Tbl_NvT <- topTags(et_NvT, n=nrow(et_NvT$table))$table  ## Out put the results into a table
write.table(Tbl_NvT, file="Tbl_NvT.csv", sep=",", row.names=TRUE)  ## Save the table for analyses next week!
## total number of significantly differently expressed genes for each pair:
is.de.NvT <- decideTestsDGE(et_NvT, p = 0.05)
summary(is.de.NvT)
## plot the differential expression
plotMD(et_NvT)
abline(h=c(-1, 1), col="blue")
# filter to only keep genes with FDR < .05
NvT.DE <-subset(Tbl_NvT, Tbl_NvT$FDR < 0.05)
dim(NvT.DE)
NvT.up <- subset(NvT.DE, NvT.DE$logFC > 0)
NvT.down <- subset(NvT.DE, NvT.DE$logFC < 0)
write.csv(NvT.DE, "NvT_DE.csv")
Tbl_NvT.DE <- mutate(Tbl_NvT, log10p= -log10(PValue))
sig <- Tbl_NvT.DE$FDR < .05
Tbl_NvT.DE <- mutate(Tbl_NvT.DE, sig = sig)
ggplot(Tbl_NvT.DE, aes(x=logFC, y=log10p, col=sig)) + geom_point() + theme_classic() + theme(legend.position = "none") + ggtitle("AHQT_LD vs. AHQN_LD")
write.csv(Tbl_NvT.DE, "AHQT_LDvsAHQN_SD.csv")
# exact test for differential expression between pairs -- run this code between all genotype & treatment pairs
et_NvT <- exactTest(d.subset, pair=c("AHQT_SD","AHQN_LD"))  ## You will change "pair" and the name to the appropriate labels for your groups' questions.
# make tables of the top tags for analysis
# the problem happens before this part
Tbl_NvT <- topTags(et_NvT, n=nrow(et_NvT$table))$table  ## Out put the results into a table
write.table(Tbl_NvT, file="Tbl_NvT.csv", sep=",", row.names=TRUE)  ## Save the table for analyses next week!
## total number of significantly differently expressed genes for each pair:
is.de.NvT <- decideTestsDGE(et_NvT, p = 0.05)
summary(is.de.NvT)
## plot the differential expression
plotMD(et_NvT)
abline(h=c(-1, 1), col="blue")
# filter to only keep genes with FDR < .05
NvT.DE <-subset(Tbl_NvT, Tbl_NvT$FDR < 0.05)
dim(NvT.DE)
NvT.up <- subset(NvT.DE, NvT.DE$logFC > 0)
NvT.down <- subset(NvT.DE, NvT.DE$logFC < 0)
write.csv(NvT.DE, "NvT_DE.csv")
Tbl_NvT.DE <- mutate(Tbl_NvT, log10p= -log10(PValue))
sig <- Tbl_NvT.DE$FDR < .05
Tbl_NvT.DE <- mutate(Tbl_NvT.DE, sig = sig)
ggplot(Tbl_NvT.DE, aes(x=logFC, y=log10p, col=sig)) + geom_point() + theme_classic() + theme(legend.position = "none") + ggtitle("AHQT_LD vs. AHQN_LD")
write.csv(Tbl_NvT.DE, "AHQT_LDvsAHQN_LD.csv")
# set working directory
setwd("~/Desktop/cberg_YNP_RNA/readsPerGene")
allFiles.list <- lapply(files, read.table, sep='\t',col.names = c("gene", "count", "count_strand1", "count_strand2"),idcol="files")
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*.tab",
full.names = TRUE)
all_content <-
all_paths %>%
lapply(read.table,
header = TRUE,
sep = "\t",
col.names = c("gene", "count", "count_strand1", "count_strand2"),
encoding = "UTF-8")
all_filenames <- all_paths %>%
basename() %>%
as.list()
all_lists <- mapply(c, all_content, all_filenames, SIMPLIFY = FALSE)
all_result <- rbindlist(all_lists, fill=T)
all_filenames
# we'll just use the counts
all <- select(all_result, gene, count, V1)
write.csv(all, "all.csv")
dim(all)
all_result
#spread so columns are individuals and rows are genes
all_wide <- spread(all, V1, count)
all_wide<- filter(all_wide, gene != "N_noFeature")
all_wide<- filter(all_wide, gene != "N_multimapping")
all_wide<- filter(all_wide, gene != "N_ambiguous")
all_wide$gene
Data <- all_wide
Data <- select(Data, -gene)
dim(all_wide)
write.csv(all_wide, "all_wide.csv")
# read in the annotation file
Annotation <- read.csv("Mgutt_annotations.csv",header=T)
View(Annotation)
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$Groups
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
Sample_Info$Groups
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$Groups
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Sample_Info$Groups
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
cpm(d)
keep <- rowSums(cpm(d) > 20) >= 4
apply(d.subset$counts, 2, sum)
# only keep sites w/ at least 20 read counts per million in at least 2 indvs
d.subset <- d[keep,]
dim(d.subset)
# reset the library sizes
d.subset$samples$lib.size <- colSums(d.subset$counts)
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
d.subset$samples
# reset the normalization factors & normalize it
d.subset <- calcNormFactors(d.subset)
# explore the data with MDS
plotMDS(d.subset, method="bcv", col=as.numeric(d.subset$samples$group))
allFiles.list <- lapply(files, read.table, sep='\t',col.names = c("gene", "count", "count_strand1", "count_strand2"),idcol="files")
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*.tab",
full.names = TRUE)
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*.tab",
full.names = TRUE)
all_content <-
all_paths %>%
lapply(read.table,
header = TRUE,
sep = "\t",
col.names = c("gene", "count", "count_strand1", "count_strand2"),
encoding = "UTF-8")
all_filenames <- all_paths %>%
basename() %>%
as.list()
all_lists <- mapply(c, all_content, all_filenames, SIMPLIFY = FALSE)
all_result <- rbindlist(all_lists, fill=T)
all_filenames
# we'll just use the counts
all <- select(all_result, gene, count, V1)
write.csv(all, "all.csv")
dim(all)
all_result
#spread so columns are individuals and rows are genes
all_wide <- spread(all, V1, count)
all_wide<- filter(all_wide, gene != "N_noFeature")
all_wide<- filter(all_wide, gene != "N_multimapping")
all_wide<- filter(all_wide, gene != "N_ambiguous")
all_wide$gene
Data <- all_wide
Data <- select(Data, -gene)
dim(all_wide)
write.csv(all_wide, "all_wide.csv")
# read in the annotation file
Annotation <- read.csv("Mgutt_annotations.csv",header=T)
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$Groups
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Sample_Info$Groups
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
cpm(d)
keep <- rowSums(cpm(d) > 20) >= 4
apply(d.subset$counts, 2, sum)
# only keep sites w/ at least 20 read counts per million in at least 2 indvs
d.subset <- d[keep,]
dim(d.subset)
# reset the library sizes
d.subset$samples$lib.size <- colSums(d.subset$counts)
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
d.subset$samples
# reset the normalization factors & normalize it
d.subset <- calcNormFactors(d.subset)
# explore the data with MDS
plotMDS(d.subset, method="bcv", col=as.numeric(d.subset$samples$group))
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$Groups
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Sample_Info$Groups
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
cpm(d)
keep <- rowSums(cpm(d) > 20) >= 4
apply(d.subset$counts, 2, sum)
# only keep sites w/ at least 20 read counts per million in at least 2 indvs
d.subset <- d[keep,]
dim(d.subset)
# reset the library sizes
d.subset$samples$lib.size <- colSums(d.subset$counts)
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
d.subset$samples
# reset the normalization factors & normalize it
d.subset <- calcNormFactors(d.subset)
# explore the data with MDS
plotMDS(d.subset, method="bcv", col=as.numeric(d.subset$samples$group))
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$Groups
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Sample_Info$Groups
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
cpm(d)
keep <- rowSums(cpm(d) > 20) >= 4
apply(d.subset$counts, 2, sum)
# only keep sites w/ at least 20 read counts per million in at least 2 indvs
d.subset <- d[keep,]
dim(d.subset)
# reset the library sizes
d.subset$samples$lib.size <- colSums(d.subset$counts)
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
d.subset$samples
# reset the normalization factors & normalize it
d.subset <- calcNormFactors(d.subset)
# explore the data with MDS
plotMDS(d.subset, method="bcv", col=as.numeric(d.subset$samples$group))
d.subset$samples
et_NvT <- exactTest(d.subset, pair=c("AHQT_LD","AHQT_SD"))  ## You will change "pair" and the name to the appropriate labels for your groups' questions.
# make tables of the top tags for analysis
# the problem happens before this part
Tbl_NvT <- topTags(et_NvT, n=nrow(et_NvT$table))$table  ## Out put the results into a table
write.table(Tbl_NvT, file="Tbl_NvT.csv", sep=",", row.names=TRUE)  ## Save the table for analyses next week!
et_NvT <- exactTest(d.subset, pair=c("AHQT_LD","AHQN_LD"))  ## You will change "pair" and the name to the appropriate labels for your groups' questions.
# make tables of the top tags for analysis
# the problem happens before this part
Tbl_NvT <- topTags(et_NvT, n=nrow(et_NvT$table))$table  ## Out put the results into a table
write.table(Tbl_NvT, file="Tbl_NvT.csv", sep=",", row.names=TRUE)  ## Save the table for analyses next week!
is.de.NvT <- decideTestsDGE(et_NvT, p = 0.05)
summary(is.de.NvT)
## plot the differential expression
plotMD(et_NvT)
abline(h=c(-1, 1), col="blue")
# filter to only keep genes with FDR < .05
NvT.DE <-subset(Tbl_NvT, Tbl_NvT$FDR < 0.05)
dim(NvT.DE)
NvT.up <- subset(NvT.DE, NvT.DE$logFC > 0)
NvT.down <- subset(NvT.DE, NvT.DE$logFC < 0)
write.csv(NvT.DE, "NvT_DE.csv")
Tbl_NvT.DE <- mutate(Tbl_NvT, log10p= -log10(PValue))
sig <- Tbl_NvT.DE$FDR < .05
Tbl_NvT.DE <- mutate(Tbl_NvT.DE, sig = sig)
ggplot(Tbl_NvT.DE, aes(x=logFC, y=log10p, col=sig)) + geom_point() + theme_classic() + theme(legend.position = "none") + ggtitle("AHQT_LD vs. AHQN_LD")
# make a DGE object
Groups <- Sample_Info$genotype
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
Sample_Info$genotype
# load required packates
library(dplyr)
library(tidyverse)
library(edgeR)
library(data.table)
# set working directory
setwd("~/Desktop/cberg_YNP_RNA/readsPerGene")
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*.tab",
full.names = TRUE)
all_content <-
all_paths %>%
lapply(read.table,
header = TRUE,
sep = "\t",
col.names = c("gene", "count", "count_strand1", "count_strand2"),
encoding = "UTF-8")
all_filenames <- all_paths %>%
basename() %>%
as.list()
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*.tab",
full.names = TRUE)
all_content <-
all_paths %>%
lapply(read.table,
header = TRUE,
sep = "\t",
col.names = c("gene", "count", "count_strand1", "count_strand2"),
encoding = "UTF-8")
all_paths
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*ReadsPerGene.out.tab",
full.names = TRUE)
all_paths
all_content <-
all_paths %>%
lapply(read.table,
header = TRUE,
sep = "\t",
col.names = c("gene", "count", "count_strand1", "count_strand2"),
encoding = "UTF-8")
all_filenames <- all_paths %>%
basename() %>%
as.list()
all_lists <- mapply(c, all_content, all_filenames, SIMPLIFY = FALSE)
all_result <- rbindlist(all_lists, fill=T)
all_filenames
# we'll just use the counts
all <- select(all_result, gene, count, V1)
write.csv(all, "all.csv")
dim(all)
all_result
#spread so columns are individuals and rows are genes
all_wide <- spread(all, V1, count)
all_wide<- filter(all_wide, gene != "N_noFeature")
all_wide<- filter(all_wide, gene != "N_multimapping")
all_wide<- filter(all_wide, gene != "N_ambiguous")
all_wide$gene
Data <- all_wide
Data <- select(Data, -gene)
dim(all_wide)
write.csv(all_wide, "all_wide.csv")
# read in the annotation file
Annotation <- read.csv("Mgutt_annotations.csv",header=T)
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$genotype
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Sample_Info$genotype
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
cpm(d)
keep <- rowSums(cpm(d) > 20) >= 4
apply(d.subset$counts, 2, sum)
# only keep sites w/ at least 20 read counts per million in at least 2 indvs
d.subset <- d[keep,]
dim(d.subset)
# reset the library sizes
d.subset$samples$lib.size <- colSums(d.subset$counts)
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
# reset the normalization factors & normalize it
d.subset <- calcNormFactors(d.sub.sub)
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the data with MDS
plotMDS(d.subset, method="bcv", col=as.numeric(d.subset$samples$group))
# read file path
all_paths <-list.files(path = "~/Desktop/cberg_YNP_RNA/readsPerGene",
pattern = "*ReadsPerGene.out.tab",
full.names = TRUE)
all_paths
all_content <-
all_paths %>%
lapply(read.table,
header = TRUE,
sep = "\t",
col.names = c("gene", "count", "count_strand1", "count_strand2"),
encoding = "UTF-8")
all_filenames <- all_paths %>%
basename() %>%
as.list()
all_lists <- mapply(c, all_content, all_filenames, SIMPLIFY = FALSE)
all_result <- rbindlist(all_lists, fill=T)
all_filenames
# we'll just use the counts
all <- select(all_result, gene, count, V1)
write.csv(all, "all.csv")
dim(all)
all_result
#spread so columns are individuals and rows are genes
all_wide <- spread(all, V1, count)
all_wide<- filter(all_wide, gene != "N_noFeature")
all_wide<- filter(all_wide, gene != "N_multimapping")
all_wide<- filter(all_wide, gene != "N_ambiguous")
all_wide$gene
Data <- all_wide
Data <- select(Data, -gene)
dim(all_wide)
write.csv(all_wide, "all_wide.csv")
# read in the annotation file
Annotation <- read.csv("Mgutt_annotations.csv",header=T)
Sample_Info <- read.csv("YNP_RNA_sample_info.csv", header = T)
write.csv(Data, "Data.csv")
# make a DGE object
Groups <- Sample_Info$genotype
d <- DGEList(counts=Data,group=factor(Groups), genes=all_wide$gene)
ncol(Data)
Sample_Info$genotype
Data
# explore & filter data to remove irrelevant sites
head(d$samples)
head(d$counts)
apply(d$counts, 2, sum)
d$samples
cpm(d)
keep <- rowSums(cpm(d) > 20) >= 4
apply(d.subset$counts, 2, sum)
# only keep sites w/ at least 20 read counts per million in at least 2 indvs
d.subset <- d[keep,]
dim(d.subset)
# reset the library sizes
d.subset$samples$lib.size <- colSums(d.subset$counts)
d.subset$samples
d.sub.sub = filter(d.subset, lib.size>1000000)
# explore the variation
barplot(d.subset$samples$lib.size*1e-6, ylab="Library size (millions)", names=rownames(d.subset$samples))
d.subset$samples
# reset the normalization factors & normalize it
d.subset <- calcNormFactors(d.sub.sub)
# explore the data with MDS
plotMDS(d.subset, method="bcv", col=as.numeric(d.subset$samples$group))
d.subset$samples
